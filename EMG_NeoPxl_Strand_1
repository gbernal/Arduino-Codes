//Smoothing
#include <Adafruit_NeoPixel.h>

// Define the number of samples to keep track of.  The higher the number,
// the more the readings will be smoothed, but the slower the output will
// respond to the input.  Using a constant rather than a normal variable lets
// use this value to determine the size of the readings array.
const int numReadings = 60;

int readings[numReadings];      // the readings from the analog input
int myIndex = 0;                  // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average
int readS = 0;                // the average


#define EMG_PIN   A1  // EMG is attached to this analog pin

#define N_PIXELS  12  // Number of pixels in strand
#define LED_PIN1    7  // NeoPixel LED strand is connected to this pin
#define LED_PIN2    6  // NeoPixel LED strand is connected to this pin
#define LED_PIN3    5  // NeoPixel LED strand is connected to this pin

#define DC_OFFSET  0  // DC offset in mic signal - if unusure, leave 0
#define NOISE     15  // Noise/hum/interference in mic signal
#define SAMPLES   10 // Length of buffer for dynamic level adjustment
#define TOP       (N_PIXELS + 2) // Allow dot to go slightly off scale
#define PEAK_FALL 60  // Rate of peak falling dot

byte
  peak      = 0,      // Used for falling dot
  dotCount  = 0,      // Frame counter for delaying dot-falling speed
  volCount  = 0;      // Frame counter for storing past volume data
int
  vol[SAMPLES],       // Collection of prior volume samples
  lvl       = 5,      // Current "dampened" audio level
  minLvlAvg = 0,      // For dynamic adjustment of graph low & high
  maxLvlAvg = 200;    // not smooth 512
  
Adafruit_NeoPixel
  strip = Adafruit_NeoPixel(N_PIXELS, LED_PIN1, NEO_GRB + NEO_KHZ800);

void setup()
{
  pinMode(LED_PIN2, OUTPUT);// 
  pinMode(LED_PIN3, OUTPUT);// 
    //initialize serial communication with computer:
  Serial.begin(9600);                   
  // initialize all the readings to 0: ###LED
  memset(vol, 0, sizeof(vol));
  strip.begin();
  
  ////      ###smoothing
  for (int thisReading = 0; thisReading < numReadings; thisReading++)
    readings[thisReading] = 0;
    

}

void loop(){
  digitalWrite(LED_PIN2,LOW);
  digitalWrite(LED_PIN3,LOW);
 // subtract the last reading:
  total= total - readings[myIndex];  
    // read from the sensor: 
  readings[myIndex] = analogRead(EMG_PIN);
    //readings[myIndex]  = map(readings[myIndex] , 0, 1023, 0, 255);
    readS = analogRead(EMG_PIN);
  total= total + readings[myIndex];       
  // advance to the next position in the array:  
  myIndex = myIndex + 1;      

  // if we're at the end of the array...
  if (myIndex >= numReadings)              
    // ...wrap around to the beginning: 
    myIndex = 0;   
// calculate the average:
  average = total / numReadings;  
  average= map(average , 0, 1023, 0, 255);

  Serial.println(readS); 
  Serial.println("This is serialIn");
  
  Serial.println(average);   
  Serial.println("This is average");

  

  delay(1);        // delay in between reads for stability  

  ///////
  uint8_t  i;
  uint16_t minLvl, maxLvl;
  int       height;

  //n   = analogRead(EMG_PIN);      // Raw reading from EMG
  average   = abs(average - 120 - DC_OFFSET); // Center on zero
  average  = (average <= NOISE) ? 0 : (average - NOISE);  // Remove noise/hum
  lvl = ((lvl * 7) + average) >> 3;    // "Dampened" reading (else looks twitchy)
  
  // Calculate bar height based on dynamic min/max levels (fixed point):
  height = TOP * (lvl - minLvlAvg) / (long)(maxLvlAvg - minLvlAvg);

  if(height < 0L)       height = 0;      // Clip output
  else if(height > TOP) height = TOP;
  if(height > peak)     peak   = height; // Keep 'peak' dot at top
  
    // Color pixels based on rainbow gradient
  for(i=0; i<N_PIXELS; i++) {
    if(i >= height)               strip.setPixelColor(i,   0,   0, 0);
    else strip.setPixelColor(i,Wheel(map(i,0,strip.numPixels()-1,30,150)));
    
  }

  // Draw peak dot  
  if(peak > 0 && peak <= N_PIXELS-1) strip.setPixelColor(peak,Wheel(map(peak,0,strip.numPixels()-1,30,150)));
  
   strip.show(); // Update strip

// Every few frames, make the peak pixel drop by 1:

    if(++dotCount >= PEAK_FALL) { //fall rate 
      
      if(peak > 0) peak--;
      dotCount = 0;
    }

  vol[volCount] = average;                      // Save sample for dynamic leveling
  if(++volCount >= SAMPLES) volCount = 0; // Advance/rollover sample counter

  // Get volume range of prior frames
  minLvl = maxLvl = vol[0];
  for(i=1; i<SAMPLES; i++) {
    if(vol[i] < minLvl)      minLvl = vol[i];
    else if(vol[i] > maxLvl) maxLvl = vol[i];
  }
  // minLvl and maxLvl indicate the volume range over prior frames, used
  // for vertically scaling the output graph (so it looks interesting
  // regardless of volume level).  If they're too close together though
  // (e.g. at very low volume levels) the graph becomes super coarse
  // and 'jumpy'...so keep some minimum distance between them (this
  // also lets the graph go to zero when no sound is playing):
  if((maxLvl - minLvl) < TOP) maxLvl = minLvl + TOP;
  minLvlAvg = (minLvlAvg * 63 + minLvl) >> 6; // Dampen min/max levels
  maxLvlAvg = (maxLvlAvg * 63 + maxLvl) >> 6; // (fake rolling average)

}

// Input a value 0 to 255 to get a color value.
// The colors are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  
  }
  else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } 
}
